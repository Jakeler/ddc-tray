# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ddcutil
else:
    import _ddcutil

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def ddca_get_display_info_list2(include_invalid_displays, OUTPUT):
    return _ddcutil.ddca_get_display_info_list2(include_invalid_displays, OUTPUT)
DDCA_IO_I2C = _ddcutil.DDCA_IO_I2C
DDCA_IO_ADL = _ddcutil.DDCA_IO_ADL
DDCA_IO_USB = _ddcutil.DDCA_IO_USB
class DDCA_Adlno(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iAdapterIndex = property(_ddcutil.DDCA_Adlno_iAdapterIndex_get, _ddcutil.DDCA_Adlno_iAdapterIndex_set)
    iDisplayIndex = property(_ddcutil.DDCA_Adlno_iDisplayIndex_get, _ddcutil.DDCA_Adlno_iDisplayIndex_set)

    def __init__(self):
        _ddcutil.DDCA_Adlno_swiginit(self, _ddcutil.new_DDCA_Adlno())
    __swig_destroy__ = _ddcutil.delete_DDCA_Adlno

# Register DDCA_Adlno in _ddcutil:
_ddcutil.DDCA_Adlno_swigregister(DDCA_Adlno)

class DDCA_IO_Path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    io_mode = property(_ddcutil.DDCA_IO_Path_io_mode_get, _ddcutil.DDCA_IO_Path_io_mode_set)
    path = property(_ddcutil.DDCA_IO_Path_path_get)

    def __init__(self):
        _ddcutil.DDCA_IO_Path_swiginit(self, _ddcutil.new_DDCA_IO_Path())
    __swig_destroy__ = _ddcutil.delete_DDCA_IO_Path

# Register DDCA_IO_Path in _ddcutil:
_ddcutil.DDCA_IO_Path_swigregister(DDCA_IO_Path)

class DDCA_IO_Path_path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i2c_busno = property(_ddcutil.DDCA_IO_Path_path_i2c_busno_get, _ddcutil.DDCA_IO_Path_path_i2c_busno_set)
    adlno = property(_ddcutil.DDCA_IO_Path_path_adlno_get, _ddcutil.DDCA_IO_Path_path_adlno_set)
    hiddev_devno = property(_ddcutil.DDCA_IO_Path_path_hiddev_devno_get, _ddcutil.DDCA_IO_Path_path_hiddev_devno_set)

    def __init__(self):
        _ddcutil.DDCA_IO_Path_path_swiginit(self, _ddcutil.new_DDCA_IO_Path_path())
    __swig_destroy__ = _ddcutil.delete_DDCA_IO_Path_path

# Register DDCA_IO_Path_path in _ddcutil:
_ddcutil.DDCA_IO_Path_path_swigregister(DDCA_IO_Path_path)

class DDCA_MCCS_Version_Spec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_ddcutil.DDCA_MCCS_Version_Spec_major_get, _ddcutil.DDCA_MCCS_Version_Spec_major_set)
    minor = property(_ddcutil.DDCA_MCCS_Version_Spec_minor_get, _ddcutil.DDCA_MCCS_Version_Spec_minor_set)

    def __init__(self):
        _ddcutil.DDCA_MCCS_Version_Spec_swiginit(self, _ddcutil.new_DDCA_MCCS_Version_Spec())
    __swig_destroy__ = _ddcutil.delete_DDCA_MCCS_Version_Spec

# Register DDCA_MCCS_Version_Spec in _ddcutil:
_ddcutil.DDCA_MCCS_Version_Spec_swigregister(DDCA_MCCS_Version_Spec)

DDCA_EDID_MFG_ID_FIELD_SIZE = _ddcutil.DDCA_EDID_MFG_ID_FIELD_SIZE
DDCA_EDID_MODEL_NAME_FIELD_SIZE = _ddcutil.DDCA_EDID_MODEL_NAME_FIELD_SIZE
DDCA_EDID_SN_ASCII_FIELD_SIZE = _ddcutil.DDCA_EDID_SN_ASCII_FIELD_SIZE
class DDCA_Display_Info(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    marker = property(_ddcutil.DDCA_Display_Info_marker_get, _ddcutil.DDCA_Display_Info_marker_set)
    dispno = property(_ddcutil.DDCA_Display_Info_dispno_get, _ddcutil.DDCA_Display_Info_dispno_set)
    path = property(_ddcutil.DDCA_Display_Info_path_get, _ddcutil.DDCA_Display_Info_path_set)
    usb_bus = property(_ddcutil.DDCA_Display_Info_usb_bus_get, _ddcutil.DDCA_Display_Info_usb_bus_set)
    usb_device = property(_ddcutil.DDCA_Display_Info_usb_device_get, _ddcutil.DDCA_Display_Info_usb_device_set)
    mfg_id = property(_ddcutil.DDCA_Display_Info_mfg_id_get, _ddcutil.DDCA_Display_Info_mfg_id_set)
    model_name = property(_ddcutil.DDCA_Display_Info_model_name_get, _ddcutil.DDCA_Display_Info_model_name_set)
    sn = property(_ddcutil.DDCA_Display_Info_sn_get, _ddcutil.DDCA_Display_Info_sn_set)
    product_code = property(_ddcutil.DDCA_Display_Info_product_code_get, _ddcutil.DDCA_Display_Info_product_code_set)
    edid_bytes = property(_ddcutil.DDCA_Display_Info_edid_bytes_get, _ddcutil.DDCA_Display_Info_edid_bytes_set)
    vcp_version = property(_ddcutil.DDCA_Display_Info_vcp_version_get, _ddcutil.DDCA_Display_Info_vcp_version_set)
    dref = property(_ddcutil.DDCA_Display_Info_dref_get, _ddcutil.DDCA_Display_Info_dref_set)

    def __init__(self):
        _ddcutil.DDCA_Display_Info_swiginit(self, _ddcutil.new_DDCA_Display_Info())
    __swig_destroy__ = _ddcutil.delete_DDCA_Display_Info

# Register DDCA_Display_Info in _ddcutil:
_ddcutil.DDCA_Display_Info_swigregister(DDCA_Display_Info)

class DDCA_Display_Info_List(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ct = property(_ddcutil.DDCA_Display_Info_List_ct_get, _ddcutil.DDCA_Display_Info_List_ct_set)
    info = property(_ddcutil.DDCA_Display_Info_List_info_get, _ddcutil.DDCA_Display_Info_List_info_set)

    def __init__(self):
        _ddcutil.DDCA_Display_Info_List_swiginit(self, _ddcutil.new_DDCA_Display_Info_List())
    __swig_destroy__ = _ddcutil.delete_DDCA_Display_Info_List

# Register DDCA_Display_Info_List in _ddcutil:
_ddcutil.DDCA_Display_Info_List_swigregister(DDCA_Display_Info_List)



